#include<iostream>

using namespace std;

class node {
		friend class linklist;
	private:
		int data;
		node *next;

}
class linklist {
	public:
		linklist();
		void insertLast(int value);
		void printlist();
		void search_node(int num);
		int delete_node(int value);

	private:
		node *head;
		node *tail;
		node *getnode();
		void insert_node(node *ptr,node input);
		node freenode (node *p);

};

linklist::linklist() {
	head=NULL;
	tail=NULL;
}

void linklist::insertLast(int value) {
	node input;
	input.data=value;
	insert_node(tail,input);
	if(tail==NULL) {
		tail=head;
	} else {
		tail=tail->next;
	}
}

//以下新增節點
node *linklist::getnode() {
	node *p;
	p=new node;
	/*if(p==NULL){
		exit(1);
	}*/
	return p;
}

//以下列印list
void linklist::printlist() {

	node *ptr=head;
	if(ptr==NULL) {
		//printf("請新增資料...");
	} else {

		while(ptr!=NULL) {
			cout<<ptr->data<<" ";
			ptr=ptr->next;
		}
		cout<<endl;
	}
}

//以下插入節點
void linklist::insert_node(node *ptr,node input) {  //在C++中 head可以當全域變數使用 固然不需要再有head當作參數
	node *new_node; /* 新節點指標變數*/
	new_node = getnode(); /* 建立新節點,取得一個可用節點*/
	*new_node = input; /* 建立節點內容*/   //前面  星號+指標變數  = 指標位置的整塊資料  含Data與指標   ((運用在多重data時，可使用此寫法 例如有 data1 座號 data2 地址 dat3 身分證 此寫法包了全部
	new_node->next = NULL; /* 設定指標初值*/

	if(ptr==NULL) { /* 指標ptr是否是NULL */

		/* 第一種情況: 插入第一個節點*/
		new_node->next = head; /* 新節點成為串列開始*/
		head = new_node;
	} else {
		if(ptr->next==NULL)/* 是否是串列結束*/
			/* 第二種情況: 插入最後一個節點*/
			ptr->next=new_node; /* 最後指向新節點*/

		else {

			/* 第三種情況: 插入成為中間節點*/
			new_node->next=ptr->next;/* (3) 新節點指向下一節點(3)*/
			ptr->next=new_node;/* 節點ptr指向新節點(4)*/
		}

	}
}
//以下釋放節點
node linklist::freenode (node *p) {
	delete p;
}

//以下尋找節點
void linklist::search_node(int num) {
	node *ptr;
	ptr=head;
	//printf("尋找值為 -> %d\n",num);
	//printf("目前值為 -> %d\n",ptr->data);
	while(ptr->data!=num) {
		//printf("ptr data -> %d \ninput data ->%d\n",ptr->data,num);
		ptr=ptr->next;
		if(ptr==NULL)break;

	}
	//printf("搜尋完成...跳出search迴圈 \n");
	if(ptr==NULL)cout<<"No"<<endl;
	else cout<<"Yes"<<endl;

}

//以下刪除節點
int linklist::delete_node(int value) {
	node *previous;
	node *ptr;
	ptr=head;
	if(ptr==NULL) {
		cout<<"請新增資料..from刪除函式"<<endl;
	} else {

		while(ptr->data!=value) {
			ptr=ptr->next;
			if(ptr==NULL)break;
		}

		if(ptr==NULL) {
			//cout<<"無此data:"<<value<<endl;
			return 0;
		}

		if(ptr==head) {
			//puts("第一種..");
			head=head->next;
			tail=head;

		} else {
			previous=head;
			while(previous->next!=ptr) {
				previous=previous->next;
			}

			if(ptr==tail) {
				//puts("第二種..");
				previous->next=NULL;
				tail=previous;
			}

			else {
				//puts("第三種..");
				previous->next=ptr->next;
			}

		}
		//puts("刪除中...");
		delete ptr;
	}
}



int main() {

	int i,N,value;

	//new運算子會配置一個int所需要的空間，並傳回該空間的位址，所以您使用指標p來儲存這個位址

	cin>>N;
	//cout<<"N ="<<N<<endl;;
	linklist *p=new linklist[N];


	for(i=0; i<N; i++) {
		do {
			cin>>value;
			if(value!=-1)p[i].insertLast(value);
		} while(value!=-1);
		//cout<<"離開第"<<i<<"次入"<<endl;
	}
	for(i=0; i<N; i++) {
		p[i].printlist();
	}

	cin>>value;
	cout<<"Delete "<<value<<endl;
	for(i=0; i<N; i++) {
		p[i].delete_node(value);
	}

	for(i=0; i<N; i++) {
		p[i].printlist();
	}

	cin>>value;
	cout<<"Find "<<value<<endl;

	for(i=0; i<N; i++) {
		p[i].search_node(value);
	}


	delete p;


	return 0;
}


